@using CodeGraph.Clients.Dto.FileSystem
@using CodeGraph.Common.Enums
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<FileSystemState> FileSystemState
@inject ILogger<FileSystemComponent> Logger;

@if (Loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudTreeView Items="TreeItems" SelectionMode="SelectionMode.SingleSelection" @bind-SelectedValues="SelectedValues">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.Expanded"
                             Items="@context.Children"
                             Value="@context.Value"
                             Icon="@context.Icon"
                             Text="@context.Text"
                             EndText="@((context as FileSystemTreeItemData)!.Number?.ToString())"
                             EndTextTypo="@Typo.caption"/>
        </ItemTemplate>
    </MudTreeView>
}

<br/>
<MudButton class="btn btn-outline-info" @onclick="LoadHierarchies">Refresh Forecasts</MudButton>

@code {
    private FileSystemHierarchyDto[] Hierarchies => FileSystemState.Value.FileSystemHierarchies;
    private bool Loading => FileSystemState.Value.Loading;

    public IReadOnlyCollection<string> SelectedValues { get; set; }

    public List<FileSystemTreeItemData> TreeItems { get; set; } = new();
    public Dictionary<string, int?> ValueMap { get; set; }

    public class FileSystemTreeItemData : TreeItemData<string>
    {
        public int? Number { get; init; }
        public string FullName { get; init; }
        public string Name { get; init; }
        public int Pk { get; init; }

        public FileSystemTreeItemData(FileSystemHierarchyDto fileSystemHierarchyDto, int? number = null) : base(fileSystemHierarchyDto.Name)
        {
            Text = fileSystemHierarchyDto.Name;
            Name = fileSystemHierarchyDto.Name;
            FullName = fileSystemHierarchyDto.FullName;
            Pk = fileSystemHierarchyDto.Pk;
            Icon = GetIcon(fileSystemHierarchyDto.Type);
            Number = number;
        }

        private static string GetIcon(FileSystemType fileSystemType)
        {
            return fileSystemType switch
            {
                FileSystemType.File => Icons.Custom.FileFormats.FileCode,
                FileSystemType.Folder => Icons.Material.Filled.Folder,
                _ => Icons.Custom.FileFormats.FileCode
            };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("{Method}", nameof(OnInitializedAsync));
        if (FileSystemState.Value.Initialized == false)
        {
            await LoadHierarchies();
            Dispatcher.Dispatch(new FileSystemSetInitializedAction());
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadHierarchies()
    {
        Logger.LogDebug("{Method}", nameof(LoadHierarchies));
        Dispatcher.Dispatch(new FileSystemLoadHierarchyAction());

        foreach (FileSystemHierarchyDto hierarchy in Hierarchies.OrderBy(x => x.Name))
        {
            Logger.LogDebug("{Method} adding child for {FileSystemEntry}", nameof(LoadHierarchies), hierarchy.FullName);

            FileSystemTreeItemData treeItemData = new(hierarchy);
            TreeItems.Add(treeItemData);
            await MapChildrenToTreeItems(treeItemData, hierarchy);
        }
    }

    private async Task MapChildrenToTreeItems(FileSystemTreeItemData currentTreeItem, FileSystemHierarchyDto currentHierarchy)
    {
        var childFolders = currentHierarchy
            .Children
            .Where(x => x.Type == FileSystemType.Folder)
            .OrderBy(x => x.Name);

        var childFiles = currentHierarchy
            .Children
            .Where(x => x.Type == FileSystemType.File)
            .OrderBy(x => x.Name);
        
        foreach (FileSystemHierarchyDto child in childFolders)
        {
            FileSystemTreeItemData treeItemData = new(child);
            Logger.LogDebug("{Method} adding child for {FileSystemEntry} {FileSystemName} {Pk}", nameof(MapChildrenToTreeItems), child.FullName, child.Name, child.Pk);
            currentTreeItem.Children ??= [];
            currentTreeItem.Children.Add(treeItemData);
            await MapChildrenToTreeItems(treeItemData, child);
        }
        
        foreach (FileSystemHierarchyDto child in childFiles)
        {
            FileSystemTreeItemData treeItemData = new(child);
            Logger.LogDebug("{Method} adding child for {FileSystemEntry} {FileSystemName} {Pk}", nameof(MapChildrenToTreeItems), child.FullName, child.Name, child.Pk);
            currentTreeItem.Children ??= [];
            currentTreeItem.Children.Add(treeItemData);
        }
    }

}