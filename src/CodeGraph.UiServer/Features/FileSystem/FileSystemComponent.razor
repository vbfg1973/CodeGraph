@using CodeGraph.Clients.Dto.FileSystem
@using CodeGraph.UiServer.Features.FileSystem.Models
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<FileSystemState> FileSystemState
@inject ILogger<FileSystemComponent> Logger;

@if (Loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <MudTreeView Items="FileSystemState.Value.FileSystemTreeItemList" SelectionMode="SelectionMode.SingleSelection" @bind-SelectedValues="SelectedValues">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.Expanded"
                             Items="@context.Children"
                             Value="@context.Value"
                             Icon="@context.Icon"
                             Text="@context.Text"
                             EndText="@((context as FileSystemTreeItemData)!.Number?.ToString())"
                             EndTextTypo="@Typo.caption"/>
        </ItemTemplate>
    </MudTreeView>
}

@code {
    private FileSystemHierarchyDto[] Hierarchies => FileSystemState.Value.FileSystemHierarchies;
    private bool Loading => FileSystemState.Value.Loading;

    public IReadOnlyCollection<string> SelectedValues { get; set; }

    public Dictionary<string, int?> ValueMap { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("{Method}", nameof(OnInitializedAsync));
        if (FileSystemState.Value.Initialized == false)
        {
            await LoadHierarchies();
            Dispatcher.Dispatch(new FileSystemSetInitializedAction());
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadHierarchies()
    {
        Logger.LogDebug("{Method}", nameof(LoadHierarchies));
        Dispatcher.Dispatch(new FileSystemLoadHierarchyAction());
    }

}