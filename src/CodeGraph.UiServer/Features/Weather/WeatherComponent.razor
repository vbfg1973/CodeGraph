@using CodeGraph.UiServer.Data
@using Fluxor
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject IState<WeatherState> WeatherState
@inject ILogger<WeatherComponent> Logger;

@if (Loading)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (WeatherForecast forecast in Forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

<br/>
<MudButton class="btn btn-outline-info" @onclick="LoadForecasts">Refresh Forecasts</MudButton>

@code {

    private WeatherForecast[] Forecasts => WeatherState.Value.Forecasts;
    private bool Loading => WeatherState.Value.Loading;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogDebug("{Method}", nameof(OnInitializedAsync));
        if (WeatherState.Value.Initialized == false)
        {
            await LoadForecasts();
            Dispatcher.Dispatch(new WeatherSetInitializedAction());
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadForecasts()
    {
        Logger.LogDebug("{Method}", nameof(LoadForecasts));
        Dispatcher.Dispatch(new WeatherLoadForecastsAction());
    }

}